{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { apiCallBegan } from './apiactions';\nconst slice = createSlice({\n  name: 'bugs',\n  initialState: {\n    list: [],\n    loading: false,\n    lastFetch: null\n  },\n  reducers: {\n    bugsRequested: (bugs, action) => {\n      bugs.loading = true;\n    },\n    bugsReceived: (bugs, action) => {\n      bugs.list = action.payload;\n      bugs.loading = false;\n      bugs.lastFetch = Date.now();\n    },\n    bugsRequestFailed: (bugs, action) => {\n      bugs.loading = false;\n    },\n    bugAssignedToUser: (bugs, action) => {\n      const {\n        id: bugId,\n        userId\n      } = action.payload;\n      const index = bugs.list.findIndex(bug => bug.id === bugId);\n      bugs.list[index].userId = userId;\n    },\n    bugAdded: (bugs, action) => {\n      bugs.list.push(action.payload);\n    },\n    bugResolved: (bugs, action) => {\n      const index = bugs.list.findIndex(bug => bug.id === action.payload.id);\n      bugs.list[index].resolved = true;\n    }\n  }\n});\nexport const {\n  bugAdded,\n  bugResolved,\n  bugAssignedToUser,\n  bugsReceived,\n  bugsRequested,\n  bugsRequestFailed\n} = slice.actions;\nexport default slice.reducer; //Action creators\n\nconst url = ''; //Getting list of bugs from server\n\nexport const loadBugs = () => (dispatch, getState) => {\n  return dispatch(apiCallBegan({\n    url,\n    onStart: bugsRequested.type,\n    onSuccess: bugsReceived.type,\n    onError: bugsRequestFailed.type\n  }));\n}; //Adding a bug to the server\n\nexport const addBug = bug => apiCallBegan({\n  url,\n  method: 'post',\n  data: bug,\n  onSuccess: bugAdded.type\n}); //Resolving a bug\n\nexport const resolveBug = id => apiCallBegan({\n  url: url + '/' + id,\n  method: 'patch',\n  data: {\n    resolved: true\n  },\n  onSuccess: bugResolved.type\n}); //Assign bug to a user\n\nexport const assignBugToUser = (bugId, userId) => apiCallBegan({\n  url: url + '/' + bugId,\n  method: 'patch',\n  data: {\n    userId\n  },\n  onSuccess: bugAssignedToUser.type\n}); //Memoization functions","map":{"version":3,"sources":["/home/neupane/workspace/Projects/Vocabs/client/src/store/bugs.js"],"names":["createSlice","apiCallBegan","slice","name","initialState","list","loading","lastFetch","reducers","bugsRequested","bugs","action","bugsReceived","payload","Date","now","bugsRequestFailed","bugAssignedToUser","id","bugId","userId","index","findIndex","bug","bugAdded","push","bugResolved","resolved","actions","reducer","url","loadBugs","dispatch","getState","onStart","type","onSuccess","onError","addBug","method","data","resolveBug","assignBugToUser"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { apiCallBegan } from './apiactions';\n\nconst slice = createSlice({\n    name: 'bugs',\n    initialState: {\n        list: [],\n        loading: false,\n        lastFetch: null,\n    },\n    reducers: {\n        bugsRequested: (bugs, action) => {\n            bugs.loading = true;\n        },\n\n        bugsReceived: (bugs, action) => {\n            bugs.list = action.payload;\n            bugs.loading = false;\n            bugs.lastFetch = Date.now();\n        },\n\n        bugsRequestFailed: (bugs, action) => {\n            bugs.loading = false;\n        },\n\n        bugAssignedToUser: (bugs, action) => {\n            const { id: bugId, userId } = action.payload;\n            const index = bugs.list.findIndex((bug) => bug.id === bugId);\n            bugs.list[index].userId = userId;\n        },\n        bugAdded: (bugs, action) => {\n            bugs.list.push(action.payload);\n        },\n        bugResolved: (bugs, action) => {\n            const index = bugs.list.findIndex((bug) => bug.id === action.payload.id);\n            bugs.list[index].resolved = true;\n        },\n    },\n});\n\nexport const {\n    bugAdded,\n    bugResolved,\n    bugAssignedToUser,\n    bugsReceived,\n    bugsRequested,\n    bugsRequestFailed,\n} = slice.actions;\nexport default slice.reducer;\n\n//Action creators\nconst url = '';\n\n//Getting list of bugs from server\nexport const loadBugs = () => (dispatch, getState) => {\n\n    return dispatch(\n        apiCallBegan({\n            url,\n            onStart: bugsRequested.type,\n            onSuccess: bugsReceived.type,\n            onError: bugsRequestFailed.type,\n        })\n    );\n};\n\n//Adding a bug to the server\nexport const addBug = (bug) =>\n    apiCallBegan({\n        url,\n        method: 'post',\n        data: bug,\n        onSuccess: bugAdded.type,\n    });\n\n//Resolving a bug\nexport const resolveBug = (id) =>\n    apiCallBegan({\n        url: url + '/' + id,\n        method: 'patch',\n        data: { resolved: true },\n        onSuccess: bugResolved.type,\n    });\n\n//Assign bug to a user\nexport const assignBugToUser = (bugId, userId) =>\n    apiCallBegan({\n        url: url + '/' + bugId,\n        method: 'patch',\n        data: { userId },\n        onSuccess: bugAssignedToUser.type,\n    });\n\n//Memoization functions\n"]},"metadata":{},"sourceType":"module"}