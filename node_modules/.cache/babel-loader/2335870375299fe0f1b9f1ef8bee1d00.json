{"ast":null,"code":"var _jsxFileName = \"/home/neupane/workspace/Projects/Vocabs/client/src/components/WordsList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { Modal } from \"@material-ui/core\";\nimport { Fade } from \"@material-ui/core\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { wordAdded } from \"../store/dictionarySlice\";\nimport { TextField } from \"@material-ui/core\";\nimport { Button } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"100%\",\n    maxWidth: \"100%\",\n    maxHeight: \"100%\",\n    marginTop: \"50px\",\n    backgroundColor: theme.palette.background.paper,\n    overflow: \"auto\"\n  },\n  inline: {\n    display: \"inline\"\n  },\n  modal: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    height: \"90vh\",\n    marginTop: \"10vh\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3)\n  },\n  fab: {\n    position: \"fixed\",\n    bottom: \"20px\",\n    right: 10\n  },\n  addWordForm: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    padding: theme.spacing(2, 4, 3)\n  },\n  formContainer: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignContent: \"center\"\n  }\n}));\n\nconst WordsList = ({\n  words\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [searchText, setSearchText] = useState(\"\");\n  const dictionary = useSelector(state => state.dictionary);\n  console.log(dictionary);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(wordAdded({\n      word: searchText,\n      definition: \"definition\" + searchText\n    }));\n    setSearchText(\"\");\n    setShowAddForm(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(List, {\n      className: classes.root,\n      children: dictionary && dictionary.map(word => {\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(ListItem, {\n            alignItems: \"flex-start\",\n            onClick: () => setOpen(true),\n            children: /*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: word.word,\n              secondary: /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  component: \"span\",\n                  variant: \"body2\",\n                  className: classes.inline,\n                  color: \"textPrimary\",\n                  children: word.definition\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            variant: \"fullWidth\",\n            component: \"li\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 17\n          }, this)]\n        }, word.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Fab, {\n      className: classes.fab,\n      color: \"primary\",\n      children: /*#__PURE__*/_jsxDEV(AddIcon, {\n        onClick: () => // dispatch(wordAdded({ word: \"test\", definition: \"testing\" }))\n        setShowAddForm(true),\n        children: \"Add word\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      className: classes.modal,\n      \"aria-labelledby\": \"transition-modal-title\",\n      \"aria-describedby\": \"transition-modal-description\",\n      open: open,\n      onClose: handleClose,\n      closeAfterTransition: true,\n      BackdropComponent: Backdrop,\n      BackdropProps: {\n        timeout: 500\n      },\n      children: /*#__PURE__*/_jsxDEV(Fade, {\n        in: open,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.paper,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            id: \"transition-modal-title\",\n            children: \"Transition modal\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            id: \"transition-modal-description\",\n            children: \"react-transition-group animates me.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.formContainer,\n      children: /*#__PURE__*/_jsxDEV(Modal, {\n        \"aria-labelledby\": \"transition-modal-title\",\n        \"aria-describedby\": \"transition-modal-description\",\n        className: classes.modal,\n        open: showAddForm,\n        onClose: () => setShowAddForm(false),\n        closeAfterTransition: true,\n        BackdropComponent: Backdrop,\n        BackdropProps: {\n          timeout: 500\n        },\n        children: /*#__PURE__*/_jsxDEV(Fade, {\n          in: showAddForm,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.addWordForm,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              children: \"Add To Dictionary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: handleSubmit,\n              children: [/*#__PURE__*/_jsxDEV(TextField, {\n                id: \"standard-basic\",\n                label: \"New Word\",\n                value: searchText,\n                onChange: e => setSearchText(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => setShowAddForm(false),\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                onClick: handleSubmit,\n                children: \"Add\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(WordsList, \"KIj3rozJ1PdI4kW1Lav6YRpLo/Q=\", false, function () {\n  return [useDispatch, useStyles, useSelector];\n});\n\n_c = WordsList;\nexport default WordsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"WordsList\");","map":{"version":3,"sources":["/home/neupane/workspace/Projects/Vocabs/client/src/components/WordsList.jsx"],"names":["React","useState","makeStyles","List","ListItem","Divider","ListItemText","Backdrop","Typography","Fab","AddIcon","Modal","Fade","useSelector","useDispatch","wordAdded","TextField","Button","useStyles","theme","root","width","maxWidth","maxHeight","marginTop","backgroundColor","palette","background","paper","overflow","inline","display","modal","height","alignItems","justifyContent","border","boxShadow","shadows","padding","spacing","fab","position","bottom","right","addWordForm","formContainer","alignContent","WordsList","words","dispatch","classes","open","setOpen","showAddForm","setShowAddForm","searchText","setSearchText","dictionary","state","console","log","handleClose","handleSubmit","e","preventDefault","word","definition","map","id","timeout","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { Modal } from \"@material-ui/core\";\nimport { Fade } from \"@material-ui/core\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { wordAdded } from \"../store/dictionarySlice\";\nimport { TextField } from \"@material-ui/core\";\nimport { Button } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    maxWidth: \"100%\",\n    maxHeight: \"100%\",\n    marginTop: \"50px\",\n    backgroundColor: theme.palette.background.paper,\n    overflow: \"auto\",\n  },\n  inline: {\n    display: \"inline\",\n  },\n  modal: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    height: \"90vh\",\n    marginTop: \"10vh\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n  fab: {\n    position: \"fixed\",\n    bottom: \"20px\",\n    right: 10,\n  },\n  addWordForm: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    padding: theme.spacing(2, 4, 3),\n  },\n  formContainer: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignContent: \"center\",\n  },\n}));\n\nconst WordsList = ({ words }) => {\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [searchText, setSearchText] = useState(\"\");\n  const dictionary = useSelector((state) => state.dictionary);\n  console.log(dictionary);\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch(\n      wordAdded({\n        word: searchText,\n        definition: \"definition\" + searchText,\n      })\n    );\n    setSearchText(\"\");\n    setShowAddForm(false);\n  };\n\n  return (\n    <>\n      <List className={classes.root}>\n        {dictionary &&\n          dictionary.map((word) => {\n            return (\n              <React.Fragment key={word.id}>\n                <ListItem alignItems=\"flex-start\" onClick={() => setOpen(true)}>\n                  <ListItemText\n                    primary={word.word}\n                    secondary={\n                      <React.Fragment>\n                        <Typography\n                          component=\"span\"\n                          variant=\"body2\"\n                          className={classes.inline}\n                          color=\"textPrimary\">\n                          {word.definition}\n                        </Typography>\n                      </React.Fragment>\n                    }\n                  />\n                </ListItem>\n                <Divider variant=\"fullWidth\" component=\"li\" />\n              </React.Fragment>\n            );\n          })}\n      </List>\n      <Fab className={classes.fab} color=\"primary\">\n        <AddIcon\n          onClick={() =>\n            // dispatch(wordAdded({ word: \"test\", definition: \"testing\" }))\n            setShowAddForm(true)\n          }>\n          Add word\n        </AddIcon>\n      </Fab>\n      {/* Full Screen Modal */}\n      <Modal\n        className={classes.modal}\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        open={open}\n        onClose={handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}>\n        <Fade in={open}>\n          <div className={classes.paper}>\n            <h2 id=\"transition-modal-title\">Transition modal</h2>\n            <p id=\"transition-modal-description\">\n              react-transition-group animates me.\n            </p>\n          </div>\n        </Fade>\n      </Modal>\n\n      {/* Add Word Modal */}\n      <div className={classes.formContainer}>\n        <Modal\n          aria-labelledby=\"transition-modal-title\"\n          aria-describedby=\"transition-modal-description\"\n          className={classes.modal}\n          open={showAddForm}\n          onClose={() => setShowAddForm(false)}\n          closeAfterTransition\n          BackdropComponent={Backdrop}\n          BackdropProps={{\n            timeout: 500,\n          }}>\n          <Fade in={showAddForm}>\n            <div className={classes.addWordForm}>\n              <Typography variant=\"h6\">Add To Dictionary</Typography>\n              <form onSubmit={handleSubmit}>\n                <TextField\n                  id=\"standard-basic\"\n                  label=\"New Word\"\n                  value={searchText}\n                  onChange={(e) => setSearchText(e.target.value)}\n                />\n                <Button onClick={() => setShowAddForm(false)}>Cancel</Button>\n                <Button onClick={handleSubmit}>Add</Button>\n              </form>\n            </div>\n          </Fade>\n        </Modal>\n      </div>\n    </>\n  );\n};\n\nexport default WordsList;\n"]},"metadata":{},"sourceType":"module"}