{"ast":null,"code":"import axios from 'axios';\n\nconst api = ({\n  dispatch\n}) => next => async action => {\n  if (action.type !== 'apiCallBegan') return next(action);\n  next(action);\n  const {\n    url,\n    method,\n    data,\n    onSuccess,\n    onError\n  } = action.payload;\n\n  try {\n    const response = await axios.request({\n      baseURL: `http://localhost:9000/allwords`,\n      url,\n      method,\n      data\n    });\n    dispatch({\n      type: onSuccess,\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: onError,\n      payload: error\n    });\n  }\n};\n\nexport default api;","map":{"version":3,"sources":["/home/neupane/workspace/Projects/Vocabs/client/src/store/middleware/api.js"],"names":["axios","api","dispatch","next","action","type","url","method","data","onSuccess","onError","payload","response","request","baseURL","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,GAAG,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkBC,IAAI,IAAI,MAAMC,MAAN,IAAgB;AAClD,MAAIA,MAAM,CAACC,IAAP,KAAgB,cAApB,EAAoC,OAAOF,IAAI,CAACC,MAAD,CAAX;AACpCD,EAAAA,IAAI,CAACC,MAAD,CAAJ;AACA,QAAM;AAAEE,IAAAA,GAAF;AAAOC,IAAAA,MAAP;AAAeC,IAAAA,IAAf;AAAqBC,IAAAA,SAArB;AAAgCC,IAAAA;AAAhC,MAA4CN,MAAM,CAACO,OAAzD;;AAEA,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,OAAN,CAAc;AACjCC,MAAAA,OAAO,EAAG,gCADuB;AAEjCR,MAAAA,GAFiC;AAGjCC,MAAAA,MAHiC;AAIjCC,MAAAA;AAJiC,KAAd,CAAvB;AAMAN,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEI,SAAR;AAAmBE,MAAAA,OAAO,EAAEC,QAAQ,CAACJ;AAArC,KAAD,CAAR;AACH,GARD,CAQE,OAAOO,KAAP,EAAc;AACZb,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEK,OAAR;AAAiBC,MAAAA,OAAO,EAAEI;AAA1B,KAAD,CAAR;AACH;AACJ,CAhBD;;AAkBA,eAAed,GAAf","sourcesContent":["import axios from 'axios'\n\nconst api = ({ dispatch }) => next => async action => {\n    if (action.type !== 'apiCallBegan') return next(action)\n    next(action)\n    const { url, method, data, onSuccess, onError } = action.payload\n\n    try {\n        const response = await axios.request({\n            baseURL: `http://localhost:9000/allwords`,\n            url,\n            method,\n            data\n        })\n        dispatch({ type: onSuccess, payload: response.data })\n    } catch (error) {\n        dispatch({ type: onError, payload: error })\n    }\n}\n\nexport default api;"]},"metadata":{},"sourceType":"module"}