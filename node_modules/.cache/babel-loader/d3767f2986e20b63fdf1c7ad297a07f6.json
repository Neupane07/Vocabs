{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst slice = createSlice({\n  name: 'words',\n  initialState: {\n    list: [],\n    loading: false,\n    lastfetch: null\n  },\n  reducers: {\n    wordsRequested: (words, action) => {\n      words.loading = true;\n    },\n    wordAdded: (state, action) => {\n      state.push(action.payload);\n    },\n    setAllWords: (state, action) => {\n      console.log(action.payload);\n    }\n  }\n}); //\n\nconst actionCreator = () => dispatch => {//call api \n  //Resolved dispatch(api)\n  //Rejected dispatch(error)\n};\n\nexport const {\n  wordAdded,\n  setAllWords\n} = slice.actions;\nexport default slice.reducer;","map":{"version":3,"sources":["/home/neupane/workspace/Projects/Vocabs/client/src/store/dictionarySlice.js"],"names":["createSlice","slice","name","initialState","list","loading","lastfetch","reducers","wordsRequested","words","action","wordAdded","state","push","payload","setAllWords","console","log","actionCreator","dispatch","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,KAAK,GAAGD,WAAW,CAAC;AACtBE,EAAAA,IAAI,EAAE,OADgB;AAEtBC,EAAAA,YAAY,EAAE;AACVC,IAAAA,IAAI,EAAE,EADI;AAEVC,IAAAA,OAAO,EAAE,KAFC;AAGVC,IAAAA,SAAS,EAAE;AAHD,GAFQ;AAOtBC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,cAAc,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/BD,MAAAA,KAAK,CAACJ,OAAN,GAAgB,IAAhB;AACH,KAHK;AAKNM,IAAAA,SAAS,EAAE,CAACC,KAAD,EAAQF,MAAR,KAAmB;AAC1BE,MAAAA,KAAK,CAACC,IAAN,CAAWH,MAAM,CAACI,OAAlB;AACH,KAPK;AAQNC,IAAAA,WAAW,EAAE,CAACH,KAAD,EAAQF,MAAR,KAAmB;AAC5BM,MAAAA,OAAO,CAACC,GAAR,CAAYP,MAAM,CAACI,OAAnB;AACH;AAVK;AAPY,CAAD,CAAzB,C,CAqBA;;AACA,MAAMI,aAAa,GAAG,MAAOC,QAAD,IAAc,CACtC;AACA;AACA;AACH,CAJD;;AAMA,OAAO,MAAM;AAAER,EAAAA,SAAF;AAAaI,EAAAA;AAAb,IAA6Bd,KAAK,CAACmB,OAAzC;AACP,eAAenB,KAAK,CAACoB,OAArB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst slice = createSlice({\n    name: 'words',\n    initialState: {\n        list: [],\n        loading: false,\n        lastfetch: null\n    },\n    reducers: {\n        wordsRequested: (words, action) => {\n            words.loading = true\n        },\n\n        wordAdded: (state, action) => {\n            state.push(action.payload)\n        },\n        setAllWords: (state, action) => {\n            console.log(action.payload)\n        }\n    }\n})\n\n//\nconst actionCreator = () => (dispatch) => {\n    //call api \n    //Resolved dispatch(api)\n    //Rejected dispatch(error)\n}\n\nexport const { wordAdded, setAllWords } = slice.actions\nexport default slice.reducer\n"]},"metadata":{},"sourceType":"module"}