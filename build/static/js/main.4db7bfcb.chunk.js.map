{"version":3,"sources":["components/Navbar.jsx","store/apiactions.js","store/words.js","components/AddNewWordModal.jsx","components/WordsList.jsx","App.js","store/entities.js","store/reducer.js","store/middleware/api.js","index.js","store/configureStore.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","title","fontFamily","textField","width","Navbar","searchText","setSearchText","useState","show","setShow","classes","className","AppBar","position","Toolbar","style","backgroundColor","Typography","variant","onClick","TextField","id","label","type","color","value","onChange","e","target","apiCallBegan","createAction","apiCallSuccess","apiCallFailed","slice","createSlice","name","initialState","list","loading","lastfetch","reducers","wordsRequested","words","action","wordsReceived","payload","Date","now","wordsRequestFailed","wordAdded","push","actions","modal","height","display","alignItems","justifyContent","addWordForm","palette","background","paper","border","padding","spacing","AddNewWordModal","showAddForm","handleSubmit","setShowAddForm","setLoading","Modal","aria-labelledby","aria-describedby","open","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","onSubmit","Button","CircularProgress","maxWidth","maxHeight","marginTop","overflow","inline","boxShadow","shadows","fab","bottom","right","WordsList","dispatch","useDispatch","setOpen","currentWord","setCurrentWord","dictionary","useSelector","state","entities","useEffect","a","getState","url","onStart","onSuccess","onError","getAllWords","preventDefault","axios","post","word","data","List","map","idx","Fragment","ListItem","ListItemText","primary","key","secondary","component","category","definition","Divider","Fab","marginLeft","etymology","example","shortDef","subExample","App","combineReducers","wordsReducer","entitiesReducer","api","next","method","request","baseURL","response","message","store","configureStore","reducer","middleware","getDefaultMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4db7bfcb.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { TextField } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  title: {\n    flexGrow: 1,\n    fontFamily: \"Kumbh Sans\",\n  },\n  textField: {\n    width: 100,\n  },\n}));\n\nexport default function Navbar({ searchText, setSearchText }) {\n  const [show, setShow] = useState(false);\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"fixed\">\n        <Toolbar style={{ backgroundColor: \"#4f053b\" }}>\n          {!show ? (\n            <Typography variant=\"h6\" className={classes.title}>\n              Vocabs\n            </Typography>\n          ) : (\n            \"\"\n          )}\n          <SearchIcon onClick={() => setShow(!show)} />\n          {show ? (\n            <TextField\n              id=\"standard-search\"\n              label=\"Search field\"\n              type=\"search\"\n              style={{ color: \"white\" }}\n              value={searchText}\n              onChange={(e) => setSearchText(e.target.value)}\n            />\n          ) : (\n            \"\"\n          )}\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const apiCallBegan = createAction(`api/callBegan`);\nexport const apiCallSuccess = createAction(`api/callSuccess`);\nexport const apiCallFailed = createAction(`api/callFailed`);\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { apiCallBegan } from './apiactions';\n\nconst slice = createSlice({\n    name: 'words',\n    initialState: {\n        list: [],\n        loading: false,\n        lastfetch: null\n    },\n    reducers: {\n        wordsRequested: (words, action) => {\n            words.loading = true\n        },\n\n        wordsReceived: (words, action) => {\n            words.list = action.payload;\n            words.loading = false;\n            words.lastfetch = Date.now();\n        },\n\n        wordsRequestFailed: (words, action) => {\n            words.loading = false;\n        },\n        wordAdded: (words, action) => {\n            words.list.push(action.payload)\n        },\n    }\n})\nexport const { wordsRequested, wordsReceived, wordsRequestFailed, wordAdded } = slice.actions\nexport default slice.reducer\n\n//Action Creators\nconst url = ''\n\n//Getting List of words from server\n\nexport const loadWords = () => (dispatch, getState) => {\n    return dispatch(\n        apiCallBegan({\n            url,\n            onStart: wordsRequested.type,\n            onSuccess: wordsReceived.type,\n            onError: wordsRequestFailed.type,\n        })\n    );\n};","import { CircularProgress, makeStyles, Modal } from \"@material-ui/core\";\nimport React from \"react\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport { Button } from \"@material-ui/core\";\nimport { TextField } from \"@material-ui/core\";\nimport { Typography } from \"@material-ui/core\";\nimport { Fade } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n\n  addWordForm: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nconst AddNewWordModal = ({\n  showAddForm,\n  handleSubmit,\n  setShowAddForm,\n  searchText,\n  setSearchText,\n  loading,\n  setLoading,\n}) => {\n  const classes = useStyles();\n  return (\n    <>\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        className={classes.modal}\n        open={showAddForm}\n        onClose={() => setShowAddForm(false)}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}>\n        <Fade in={showAddForm}>\n          <div className={classes.addWordForm}>\n            <Typography variant=\"h6\">Add To Dictionary</Typography>\n            <form onSubmit={handleSubmit}>\n              <TextField\n                id=\"standard-basic\"\n                label=\"New Word\"\n                value={searchText}\n                onChange={(e) => setSearchText(e.target.value)}\n              />\n              <Button onClick={() => setShowAddForm(false)}>Cancel</Button>\n              <Button onClick={handleSubmit}>\n                {loading ? <CircularProgress color=\"secondary\" /> : \"Add\"}\n              </Button>\n            </form>\n          </div>\n        </Fade>\n      </Modal>\n    </>\n  );\n};\n\nexport default AddNewWordModal;\n","import React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { Modal } from \"@material-ui/core\";\nimport { Fade } from \"@material-ui/core\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { loadWords, wordAdded } from \"../store/words\";\nimport AddNewWordModal from \"./AddNewWordModal\";\nimport axios from \"axios\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    maxWidth: \"100%\",\n    maxHeight: \"100%\",\n    marginTop: \"50px\",\n    backgroundColor: theme.palette.background.paper,\n    overflow: \"auto\",\n    fontFamily: \"Kumbh Sans\",\n  },\n  inline: {\n    display: \"inline\",\n  },\n  modal: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    height: \"100vh\",\n    width: \"100vh\",\n    marginTop: \"10vh\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n  fab: {\n    position: \"fixed\",\n    bottom: \"20px\",\n    right: 10,\n    backgroundColor: \"#4f053b\",\n  },\n}));\n\nconst WordsList = () => {\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [searchText, setSearchText] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [currentWord, setCurrentWord] = useState(0);\n  const dictionary = useSelector((state) => state.entities.words.list);\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  useEffect(() => {\n    const getAllWords = async () => {\n      dispatch(loadWords());\n    };\n    getAllWords();\n  }, [dispatch]);\n\n  //Adding new Word\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!searchText) return;\n    setLoading(true);\n    const { data } = await axios.post(\n      \"https://vocabs-dictionary.herokuapp.com/verifyword\",\n      {\n        word: searchText,\n      }\n    );\n    dispatch(wordAdded(data));\n\n    setSearchText(\"\");\n    setLoading(false);\n    setShowAddForm(false);\n  };\n\n  return (\n    <>\n      <List className={classes.root}>\n        {dictionary &&\n          dictionary.map((word, idx) => {\n            return (\n              <React.Fragment key={word.key}>\n                <ListItem\n                  alignItems=\"flex-start\"\n                  onClick={() => {\n                    setOpen(true);\n                    setCurrentWord(idx);\n                  }}>\n                  <ListItemText\n                    primary={word.key}\n                    secondary={\n                      <React.Fragment>\n                        <Typography\n                          component=\"span\"\n                          variant=\"body2\"\n                          className={classes.inline}\n                          color=\"textPrimary\">\n                          ({word.category}){word.definition}\n                        </Typography>\n                      </React.Fragment>\n                    }\n                  />\n                </ListItem>\n                <Divider variant=\"fullWidth\" component=\"li\" />\n              </React.Fragment>\n            );\n          })}\n      </List>\n      <Fab className={classes.fab} color=\"primary\">\n        <AddIcon onClick={() => setShowAddForm(true)}>Add word</AddIcon>\n      </Fab>\n      {/* Full Screen Modal */}\n      <Modal\n        className={classes.modal}\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        open={open}\n        onClose={handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}>\n        <Fade in={open}>\n          <div className={classes.paper}>\n            <button\n              style={{ border: \"none\", marginLeft: \"98%\" }}\n              onClick={() => setOpen(false)}>\n              x\n            </button>\n            <h1 id=\"transition-modal-title\">\n              {dictionary && dictionary[currentWord]?.key}\n            </h1>\n            <p id=\"transition-modal-description\">\n              {dictionary && dictionary[currentWord]?.category}\n            </p>\n            <p>{dictionary && dictionary[currentWord]?.etymology}</p>\n            {dictionary && dictionary[currentWord]?.definition}\n            <p>\n              <li>{dictionary && dictionary[currentWord]?.example}</li>\n            </p>\n            <p>\n              <li>{dictionary && dictionary[currentWord]?.shortDef}</li>\n            </p>\n            <p>\n              <li>{dictionary && dictionary[currentWord]?.subExample}</li>\n            </p>\n          </div>\n        </Fade>\n      </Modal>\n\n      {/* Add Word Modal */}\n      <AddNewWordModal\n        loading={loading}\n        setLoading={setLoading}\n        showAddForm={showAddForm}\n        handleSubmit={handleSubmit}\n        setShowAddForm={setShowAddForm}\n        searchText={searchText}\n        setSearchText={setSearchText}\n      />\n    </>\n  );\n};\n\nexport default WordsList;\n","import { useState } from 'react';\nimport Navbar from './components/Navbar'\nimport WordsList from './components/WordsList'\n\nconst App = () => {\n  const [searchText, setSearchText] = useState(\"\");\n  return (\n    <div className=\"App\">\n      <Navbar searchText={searchText} setSearchText={setSearchText} />\n      <WordsList searchText={searchText} />\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\n// import bugsReducer from './bugs';\n// import projectsReducer from './projects';\n// import userReducer from './users';\nimport wordsReducer from './words'\n\nexport default combineReducers({\n    // bugs: bugsReducer,\n    words: wordsReducer,\n    // projects: projectsReducer,\n    // users: userReducer,\n});\n","import { combineReducers } from 'redux';\nimport entitiesReducer from './entities';\n\nexport default combineReducers({\n    entities: entitiesReducer,\n});\n","import axios from 'axios';\nimport * as actions from '../apiactions';\n\nconst api = ({ dispatch }) => (next) => async (action) => {\n    if (action.type !== actions.apiCallBegan.type) return next(action);\n\n    const { url, method, data, onStart, onSuccess, onError } = action.payload;\n\n    if (onStart) dispatch({ type: onStart });\n\n    next(action);\n\n    try {\n        const response = await axios.request({\n            baseURL: 'https://vocabs-dictionary.herokuapp.com/allwords',\n            url,\n            method,\n            data,\n        });\n        // General\n        dispatch(actions.apiCallSuccess(response.data));\n        // Specific\n        if (onSuccess) dispatch({ type: onSuccess, payload: response.data });\n    } catch (error) {\n        // General\n        dispatch(actions.apiCallFailed(error.message));\n        // Specific\n        if (onError) dispatch({ type: onError, payload: error.message });\n    }\n};\n\nexport default api;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport configureStore from './store/configureStore';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport reducer from './reducer';\nimport api from './middleware/api';\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default function () {\n    return configureStore({\n        reducer,\n        middleware: [\n            ...getDefaultMiddleware(),\n            api,\n        ],\n    });\n}\n"],"sourceRoot":""}